{"ast":null,"code":"import { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState, useEffect, RingLoader } from \"react\";\nimport React from \"react\";\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  return _jsx(View, {\n    children: _jsx(Text, {\n      children: \"AAAAA\"\n    })\n  });\n}","map":{"version":3,"names":["StatusBar","useState","useEffect","RingLoader","React","RegisterScreen","LoginScreen","App"],"sources":["C:/Users/micha/Desktop/AwesomeProject/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useState, useEffect, RingLoader } from \"react\";\nimport React from \"react\";\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport LoginScreen from \"./components/LoginScreen\";\n\nexport default function App() {\n  /*  //the array of results that was is fetched from API\n  let [results, setResults] = useState([]);\n  let [isFetching, setIsFetching] = useState(true);\n  let [fetchingCategories, setFetchingCategories] = useState(true);\n  let [categories, setCategories] = useState([]);\n  let [usersArray, setUsersArray] = useState([]);\n  const [isClicked, setIsClicked] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  let [score, setScore] = useState(0);\n  const [finished, setFinished] = useState(false);\n  const [questionId, setQuestionId] = useState(\"\");\n  let [user, setUser] = React.useState(null);\n  const [registerScreen, setRegisterScreen] = useState(false);\n  let answers = [];\n  let screen = null;\n  let [userIndex, setUserIndex] = useState(null);\n  let [objAnswers, setObjAnswers] = useState([]);\n\n  useEffect(() => {\n    fetchCategories();\n\n    const data = localStorage.getItem(\"usersArray\");\n    data && setUsersArray(JSON.parse(data));\n    if (data) usersArray = JSON.parse(data);\n  }, []);\n\n  useEffect(() => {\n    //stores the user only if the form is valid\n    localStorage.setItem(\"usersArray\", JSON.stringify(usersArray));\n  }, [score]);\n\n  async function fetchCategories() {\n    try {\n      const response = await axios.get(\"https://opentdb.com/api_category.php\");\n\n      const data = await response.data;\n      categories = data.trivia_categories;\n      setCategories(categories);\n      setFetchingCategories(false);\n    } catch (err) {\n      alert(err);\n    }\n  }\n  async function fetchresults(categoryId) {\n    try {\n      const response = await axios.get(\n        `https://opentdb.com/api.php?amount=10&category=${categoryId}&difficulty=easy&type=multiple`\n      );\n      const code = response.data.response_code;\n\n      //manual error if promise is rejected..\n      if (code !== 0) {\n        const err =\n          code === 1\n            ? \" No Results. The API doesn't have enough questions for your query.\"\n            : code === 2\n            ? \"Invalid Parameter. Arguements passed in aren't valid.\"\n            : code === 3\n            ? \"Token Not Found. Session Token does not exist.\"\n            : \"Token Empty Session. Token has returned all possible questions for the specified query. Resetting the Token is necessary.\";\n\n        throw new Error(`${err}`);\n      } else {\n        const data = await response.data;\n        results = data.results;\n        // creating the all_answers array\n        for (let result of results) {\n          let allAnswers = [...result.incorrect_answers, result.correct_answer];\n          // shuffling the answers in the array with Durstenfeld shuffle method\n          for (let i = allAnswers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [allAnswers[i], allAnswers[j]] = [allAnswers[j], allAnswers[i]];\n          }\n          //adding allAnswers in the results\n          result.all_answers = allAnswers;\n        }\n\n        // console.log(results);\n        setResults(results);\n\n        setIsFetching(false);\n        return results;\n      }\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  //choose category first\n  if (!fetchingCategories) {\n    const categoryNames = categories.map(({ id, name }) => (\n      <option value={id}>{name}</option>\n    ));\n\n    screen = (\n      <StartingScreen\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        content={categoryNames}\n      />\n    );\n  } else\n    screen = (\n      <View\n        style={{\n          position: \"fixed\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n        }}\n      >\n        <RingLoader color=\"#36d7b7\" size={150} />\n      </View>\n    );\n  if (!isFetching) {\n    let currentAnswers = results[currentQuestion].all_answers;\n    //refactor with useRef\n    if (objAnswers.length < 4) {\n      //creating an array of objects to set the clicked property\n      for (let answer of currentAnswers) {\n        let curObj = {};\n\n        //getting index and set it as key\n        const index = currentAnswers.indexOf(answer);\n        curObj[index] = answer;\n\n        objAnswers.push({ ...curObj });\n      }\n    }\n\n    answers = objAnswers.map((object) => (\n      <li key={Object.keys(object)} style={{ margin: \"8px 15px 8px 0\" }}>\n        <Answer\n          text={Object.values(object)}\n          onClick={() => handleClick(Object.keys(object)[0])}\n          className={testClassName(object)}\n        />\n      </li>\n    ));\n\n    function testClassName(object) {\n      let curValue = Object.values(object)[0];\n\n      //tests if the current value is equal to the correct answer and returns the proper color\n      return object.clicked\n        ? curValue === results[currentQuestion].correct_answer\n          ? \"btn btn-success\"\n          : \"btn btn-danger\"\n        : \"btn btn-light\";\n    }\n\n    function handleClick(index) {\n      if (!isClicked) {\n        setIsClicked(true);\n        objAnswers[index].clicked = true;\n\n        const curQuestion = Object.values(objAnswers[index])[0];\n        console.log(objAnswers[index]);\n        if (curQuestion === results[currentQuestion].correct_answer) {\n          setScore(score + 100 / results.length);\n\n          usersArray[userIndex].totalScore =\n            usersArray[userIndex].totalScore + 100 / results.length;\n\n          //set total score to usersArray and run the useEffect\n          setUsersArray(usersArray);\n        }\n      }\n      console.log(objAnswers);\n    }\n\n    screen = (\n      <QuizScreen\n        buttonDisabled={!isClicked}\n        title={results[currentQuestion].question}\n        answers={answers}\n        onClick={nextQuestionFunction}\n        score={score}\n        totalScore={usersArray[userIndex].totalScore}\n      />\n    );\n  }\n  if (finished) screen = <FinishScreen score={score} onClick={tryAgain} />;\n\n  function handleChange(event) {\n    setQuestionId(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    fetchresults(questionId);\n    event.preventDefault();\n  }\n\n  function nextQuestionFunction() {\n    if (currentQuestion + 1 === results.length) {\n      setFinished(true);\n    } else {\n      setCurrentQuestion(currentQuestion + 1);\n      setIsClicked(false);\n      setObjAnswers([]);\n    }\n  }\n\n  function tryAgain() {\n    setCurrentQuestion(0);\n    setScore(0);\n    setIsClicked(false);\n    setFinished(false);\n    setIsFetching(true);\n    setObjAnswers([]);\n  }\n  function getUserIndex(index) {\n    //add totalScore property if doesn't exist\n    if (!usersArray[index].totalScore) {\n      usersArray[index].totalScore = 0;\n      setUsersArray(usersArray);\n    }\n    userIndex = index;\n    setUserIndex(index);\n    setUsersArray(usersArray);\n    setUser(usersArray[index]);\n    user = usersArray[index];\n  }\n  function registerLogilToggle() {\n    setRegisterScreen(!registerScreen);\n  }\n  // return <RegisterScreen />;\n  if (!user)\n    return registerScreen ? (\n      <RegisterScreen registerLogilToggle={registerLogilToggle} />\n    ) : (\n      <LoginScreen\n        registerLogilToggle={registerLogilToggle}\n        setUserIndex={getUserIndex}\n      />\n    );\n  else return screen;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n*/\n  // return <LoginScreen />;\n  return (\n    <View>\n      <Text>AAAAA</Text>\n    </View>\n  );\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC;AAAA;AAAA;AAE5C,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc;AACrB,OAAOC,WAAW;AAAiC;AAEnD,eAAe,SAASC,GAAG,GAAG;EA0P5B,OACE,KAAC,IAAI;IAAA,UACH,KAAC,IAAI;MAAA;IAAA;EAAa,EACb;AAEX"},"metadata":{},"sourceType":"module"}