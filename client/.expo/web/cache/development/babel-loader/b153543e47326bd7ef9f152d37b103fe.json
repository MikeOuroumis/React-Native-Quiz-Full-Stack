{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState, useEffect, RingLoader } from \"react\";\nimport React from \"react\";\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport LoginScreen from \"./components/LoginScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    results = _useState2[0],\n    setResults = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFetching = _useState4[0],\n    setIsFetching = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    fetchingCategories = _useState6[0],\n    setFetchingCategories = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    categories = _useState8[0],\n    setCategories = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    usersArray = _useState10[0],\n    setUsersArray = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isClicked = _useState12[0],\n    setIsClicked = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    currentQuestion = _useState14[0],\n    setCurrentQuestion = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    score = _useState16[0],\n    setScore = _useState16[1];\n  var _useState17 = useState(false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    finished = _useState18[0],\n    setFinished = _useState18[1];\n  var _useState19 = useState(\"\"),\n    _useState20 = _slicedToArray(_useState19, 2),\n    questionId = _useState20[0],\n    setQuestionId = _useState20[1];\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    user = _React$useState2[0],\n    setUser = _React$useState2[1];\n  var _useState21 = useState(false),\n    _useState22 = _slicedToArray(_useState21, 2),\n    registerScreen = _useState22[0],\n    setRegisterScreen = _useState22[1];\n  var answers = [];\n  var screen = null;\n  var _useState23 = useState(null),\n    _useState24 = _slicedToArray(_useState23, 2),\n    userIndex = _useState24[0],\n    setUserIndex = _useState24[1];\n  var _useState25 = useState([]),\n    _useState26 = _slicedToArray(_useState25, 2),\n    objAnswers = _useState26[0],\n    setObjAnswers = _useState26[1];\n  useEffect(function () {\n    fetchCategories();\n    var data = localStorage.getItem(\"usersArray\");\n    data && setUsersArray(JSON.parse(data));\n    if (data) usersArray = JSON.parse(data);\n  }, []);\n  useEffect(function () {\n    localStorage.setItem(\"usersArray\", JSON.stringify(usersArray));\n  }, [score]);\n  function fetchCategories() {\n    return _fetchCategories.apply(this, arguments);\n  }\n  function _fetchCategories() {\n    _fetchCategories = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.get(\"https://opentdb.com/api_category.php\");\n        var data = yield response.data;\n        categories = data.trivia_categories;\n        setCategories(categories);\n        setFetchingCategories(false);\n      } catch (err) {\n        alert(err);\n      }\n    });\n    return _fetchCategories.apply(this, arguments);\n  }\n  function fetchresults(_x) {\n    return _fetchresults.apply(this, arguments);\n  }\n  function _fetchresults() {\n    _fetchresults = _asyncToGenerator(function* (categoryId) {\n      try {\n        var response = yield axios.get(\"https://opentdb.com/api.php?amount=10&category=\" + categoryId + \"&difficulty=easy&type=multiple\");\n        var code = response.data.response_code;\n\n        if (code !== 0) {\n          var err = code === 1 ? \" No Results. The API doesn't have enough questions for your query.\" : code === 2 ? \"Invalid Parameter. Arguements passed in aren't valid.\" : code === 3 ? \"Token Not Found. Session Token does not exist.\" : \"Token Empty Session. Token has returned all possible questions for the specified query. Resetting the Token is necessary.\";\n          throw new Error(\"\" + err);\n        } else {\n          var data = yield response.data;\n          results = data.results;\n          for (var result of results) {\n            var allAnswers = [].concat(_toConsumableArray(result.incorrect_answers), [result.correct_answer]);\n            for (var i = allAnswers.length - 1; i > 0; i--) {\n              var j = Math.floor(Math.random() * (i + 1));\n              var _ref2 = [allAnswers[j], allAnswers[i]];\n              allAnswers[i] = _ref2[0];\n              allAnswers[j] = _ref2[1];\n            }\n            result.all_answers = allAnswers;\n          }\n\n          setResults(results);\n          setIsFetching(false);\n          return results;\n        }\n      } catch (err) {\n        alert(err);\n      }\n    });\n    return _fetchresults.apply(this, arguments);\n  }\n  if (!fetchingCategories) {\n    var categoryNames = categories.map(function (_ref) {\n      var id = _ref.id,\n        name = _ref.name;\n      return _jsx(\"option\", {\n        value: id,\n        children: name\n      });\n    });\n    screen = _jsx(StartingScreen, {\n      onChange: handleChange,\n      onSubmit: handleSubmit,\n      content: categoryNames\n    });\n  } else screen = _jsx(View, {\n    style: {\n      position: \"fixed\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\"\n    },\n    children: _jsx(RingLoader, {\n      color: \"#36d7b7\",\n      size: 150\n    })\n  });\n  if (!isFetching) {\n    var currentAnswers = results[currentQuestion].all_answers;\n    if (objAnswers.length < 4) {\n      for (var answer of currentAnswers) {\n        var curObj = {};\n\n        var index = currentAnswers.indexOf(answer);\n        curObj[index] = answer;\n        objAnswers.push(_objectSpread({}, curObj));\n      }\n    }\n    answers = objAnswers.map(function (object) {\n      return _jsx(\"li\", {\n        style: {\n          margin: \"8px 15px 8px 0\"\n        },\n        children: _jsx(Answer, {\n          text: Object.values(object),\n          onClick: function onClick() {\n            return handleClick(Object.keys(object)[0]);\n          },\n          className: testClassName(object)\n        })\n      }, Object.keys(object));\n    });\n    function testClassName(object) {\n      var curValue = Object.values(object)[0];\n\n      return object.clicked ? curValue === results[currentQuestion].correct_answer ? \"btn btn-success\" : \"btn btn-danger\" : \"btn btn-light\";\n    }\n    function handleClick(index) {\n      if (!isClicked) {\n        setIsClicked(true);\n        objAnswers[index].clicked = true;\n        var curQuestion = Object.values(objAnswers[index])[0];\n        console.log(objAnswers[index]);\n        if (curQuestion === results[currentQuestion].correct_answer) {\n          setScore(score + 100 / results.length);\n          usersArray[userIndex].totalScore = usersArray[userIndex].totalScore + 100 / results.length;\n\n          setUsersArray(usersArray);\n        }\n      }\n      console.log(objAnswers);\n    }\n    screen = _jsx(QuizScreen, {\n      buttonDisabled: !isClicked,\n      title: results[currentQuestion].question,\n      answers: answers,\n      onClick: nextQuestionFunction,\n      score: score,\n      totalScore: usersArray[userIndex].totalScore\n    });\n  }\n  if (finished) screen = _jsx(FinishScreen, {\n    score: score,\n    onClick: tryAgain\n  });\n  function handleChange(event) {\n    setQuestionId(event.target.value);\n  }\n  function handleSubmit(event) {\n    fetchresults(questionId);\n    event.preventDefault();\n  }\n  function nextQuestionFunction() {\n    if (currentQuestion + 1 === results.length) {\n      setFinished(true);\n    } else {\n      setCurrentQuestion(currentQuestion + 1);\n      setIsClicked(false);\n      setObjAnswers([]);\n    }\n  }\n  function tryAgain() {\n    setCurrentQuestion(0);\n    setScore(0);\n    setIsClicked(false);\n    setFinished(false);\n    setIsFetching(true);\n    setObjAnswers([]);\n  }\n  function getUserIndex(index) {\n    if (!usersArray[index].totalScore) {\n      usersArray[index].totalScore = 0;\n      setUsersArray(usersArray);\n    }\n    userIndex = index;\n    setUserIndex(index);\n    setUsersArray(usersArray);\n    setUser(usersArray[index]);\n    user = usersArray[index];\n  }\n  function registerLogilToggle() {\n    setRegisterScreen(!registerScreen);\n  }\n  if (!user) return registerScreen ? _jsx(RegisterScreen, {\n    registerLogilToggle: registerLogilToggle\n  }) : _jsx(LoginScreen, {\n    registerLogilToggle: registerLogilToggle,\n    setUserIndex: getUserIndex\n  });else return screen;\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"names":["StatusBar","useState","useEffect","RingLoader","React","RegisterScreen","LoginScreen","App","results","setResults","isFetching","setIsFetching","fetchingCategories","setFetchingCategories","categories","setCategories","usersArray","setUsersArray","isClicked","setIsClicked","currentQuestion","setCurrentQuestion","score","setScore","finished","setFinished","questionId","setQuestionId","user","setUser","registerScreen","setRegisterScreen","answers","screen","userIndex","setUserIndex","objAnswers","setObjAnswers","fetchCategories","data","localStorage","getItem","JSON","parse","setItem","stringify","response","axios","get","trivia_categories","err","alert","fetchresults","categoryId","code","response_code","Error","result","allAnswers","incorrect_answers","correct_answer","i","length","j","Math","floor","random","all_answers","categoryNames","map","id","name","handleChange","handleSubmit","position","top","left","transform","currentAnswers","answer","curObj","index","indexOf","push","object","margin","Object","values","handleClick","keys","testClassName","curValue","clicked","curQuestion","console","log","totalScore","question","nextQuestionFunction","tryAgain","event","target","value","preventDefault","getUserIndex","registerLogilToggle","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/micha/Desktop/AwesomeProject/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useState, useEffect, RingLoader } from \"react\";\nimport React from \"react\";\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport LoginScreen from \"./components/LoginScreen\";\n\nexport default function App() {\n  //the array of results that was is fetched from API\n  let [results, setResults] = useState([]);\n  let [isFetching, setIsFetching] = useState(true);\n  let [fetchingCategories, setFetchingCategories] = useState(true);\n  let [categories, setCategories] = useState([]);\n  let [usersArray, setUsersArray] = useState([]);\n  const [isClicked, setIsClicked] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  let [score, setScore] = useState(0);\n  const [finished, setFinished] = useState(false);\n  const [questionId, setQuestionId] = useState(\"\");\n  let [user, setUser] = React.useState(null);\n  const [registerScreen, setRegisterScreen] = useState(false);\n  let answers = [];\n  let screen = null;\n  let [userIndex, setUserIndex] = useState(null);\n  let [objAnswers, setObjAnswers] = useState([]);\n\n  useEffect(() => {\n    fetchCategories();\n\n    const data = localStorage.getItem(\"usersArray\");\n    data && setUsersArray(JSON.parse(data));\n    if (data) usersArray = JSON.parse(data);\n  }, []);\n\n  useEffect(() => {\n    //stores the user only if the form is valid\n    localStorage.setItem(\"usersArray\", JSON.stringify(usersArray));\n  }, [score]);\n\n  async function fetchCategories() {\n    try {\n      const response = await axios.get(\"https://opentdb.com/api_category.php\");\n\n      const data = await response.data;\n      categories = data.trivia_categories;\n      setCategories(categories);\n      setFetchingCategories(false);\n    } catch (err) {\n      alert(err);\n    }\n  }\n  async function fetchresults(categoryId) {\n    try {\n      const response = await axios.get(\n        `https://opentdb.com/api.php?amount=10&category=${categoryId}&difficulty=easy&type=multiple`\n      );\n      const code = response.data.response_code;\n\n      //manual error if promise is rejected..\n      if (code !== 0) {\n        const err =\n          code === 1\n            ? \" No Results. The API doesn't have enough questions for your query.\"\n            : code === 2\n            ? \"Invalid Parameter. Arguements passed in aren't valid.\"\n            : code === 3\n            ? \"Token Not Found. Session Token does not exist.\"\n            : \"Token Empty Session. Token has returned all possible questions for the specified query. Resetting the Token is necessary.\";\n\n        throw new Error(`${err}`);\n      } else {\n        const data = await response.data;\n        results = data.results;\n        // creating the all_answers array\n        for (let result of results) {\n          let allAnswers = [...result.incorrect_answers, result.correct_answer];\n          // shuffling the answers in the array with Durstenfeld shuffle method\n          for (let i = allAnswers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [allAnswers[i], allAnswers[j]] = [allAnswers[j], allAnswers[i]];\n          }\n          //adding allAnswers in the results\n          result.all_answers = allAnswers;\n        }\n\n        // console.log(results);\n        setResults(results);\n\n        setIsFetching(false);\n        return results;\n      }\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  //choose category first\n  if (!fetchingCategories) {\n    const categoryNames = categories.map(({ id, name }) => (\n      <option value={id}>{name}</option>\n    ));\n\n    screen = (\n      <StartingScreen\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n        content={categoryNames}\n      />\n    );\n  } else\n    screen = (\n      <View\n        style={{\n          position: \"fixed\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n        }}\n      >\n        <RingLoader color=\"#36d7b7\" size={150} />\n      </View>\n    );\n  if (!isFetching) {\n    let currentAnswers = results[currentQuestion].all_answers;\n    //refactor with useRef\n    if (objAnswers.length < 4) {\n      //creating an array of objects to set the clicked property\n      for (let answer of currentAnswers) {\n        let curObj = {};\n\n        //getting index and set it as key\n        const index = currentAnswers.indexOf(answer);\n        curObj[index] = answer;\n\n        objAnswers.push({ ...curObj });\n      }\n    }\n\n    answers = objAnswers.map((object) => (\n      <li key={Object.keys(object)} style={{ margin: \"8px 15px 8px 0\" }}>\n        <Answer\n          text={Object.values(object)}\n          onClick={() => handleClick(Object.keys(object)[0])}\n          className={testClassName(object)}\n        />\n      </li>\n    ));\n\n    function testClassName(object) {\n      let curValue = Object.values(object)[0];\n\n      //tests if the current value is equal to the correct answer and returns the proper color\n      return object.clicked\n        ? curValue === results[currentQuestion].correct_answer\n          ? \"btn btn-success\"\n          : \"btn btn-danger\"\n        : \"btn btn-light\";\n    }\n\n    function handleClick(index) {\n      if (!isClicked) {\n        setIsClicked(true);\n        objAnswers[index].clicked = true;\n\n        const curQuestion = Object.values(objAnswers[index])[0];\n        console.log(objAnswers[index]);\n        if (curQuestion === results[currentQuestion].correct_answer) {\n          setScore(score + 100 / results.length);\n\n          usersArray[userIndex].totalScore =\n            usersArray[userIndex].totalScore + 100 / results.length;\n\n          //set total score to usersArray and run the useEffect\n          setUsersArray(usersArray);\n        }\n      }\n      console.log(objAnswers);\n    }\n\n    screen = (\n      <QuizScreen\n        buttonDisabled={!isClicked}\n        title={results[currentQuestion].question}\n        answers={answers}\n        onClick={nextQuestionFunction}\n        score={score}\n        totalScore={usersArray[userIndex].totalScore}\n      />\n    );\n  }\n  if (finished) screen = <FinishScreen score={score} onClick={tryAgain} />;\n\n  function handleChange(event) {\n    setQuestionId(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    fetchresults(questionId);\n    event.preventDefault();\n  }\n\n  function nextQuestionFunction() {\n    if (currentQuestion + 1 === results.length) {\n      setFinished(true);\n    } else {\n      setCurrentQuestion(currentQuestion + 1);\n      setIsClicked(false);\n      setObjAnswers([]);\n    }\n  }\n\n  function tryAgain() {\n    setCurrentQuestion(0);\n    setScore(0);\n    setIsClicked(false);\n    setFinished(false);\n    setIsFetching(true);\n    setObjAnswers([]);\n  }\n  function getUserIndex(index) {\n    //add totalScore property if doesn't exist\n    if (!usersArray[index].totalScore) {\n      usersArray[index].totalScore = 0;\n      setUsersArray(usersArray);\n    }\n    userIndex = index;\n    setUserIndex(index);\n    setUsersArray(usersArray);\n    setUser(usersArray[index]);\n    user = usersArray[index];\n  }\n  function registerLogilToggle() {\n    setRegisterScreen(!registerScreen);\n  }\n  // return <RegisterScreen />;\n  if (!user)\n    return registerScreen ? (\n      <RegisterScreen registerLogilToggle={registerLogilToggle} />\n    ) : (\n      <LoginScreen\n        registerLogilToggle={registerLogilToggle}\n        setUserIndex={getUserIndex}\n      />\n    );\n  else return screen;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}