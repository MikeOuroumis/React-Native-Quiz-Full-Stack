{"version":3,"sources":["index.tsx"],"names":["SocketIO","constructor","url","options","SocketIOModule","NativeModules","RNSocketIO","SocketIOCallbacksList","path","eventEmitter","NativeEventEmitter","SocketIo","addListener","nativeEvent","uniqueID","callback","data","initialize","_callCallbackResponse","error","connect","disconnect","emit","eventName","on","nativeEventName","once","off","keyToDelete","key","Object","keys","listItem","connected","getId","connectedSync","getIdSync","updateSocketOptions","Error","updateSocketOptionsSync","serializeQuery","object","str","p","hasOwnProperty","push","encodeURIComponent","join"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter } from 'react-native';\n\ntype SocketNativeEvent = {\n  data: any;\n  eventName: string;\n  uniqueID: string;\n};\n\ntype SocketCallbackResponse = (error?: Error) => void;\n\nexport type SocketIOOptions = {\n  transports?: string[];\n  forceNew?: boolean;\n  multiplex?: boolean;\n  reconnectionAttempts?: number;\n  reconnectionDelay?: number;\n  reconnectionDelayMax?: number;\n  randomizationFactor?: number;\n  timeout?: number;\n  query?: string;\n  path?: string;\n};\n\nexport type SocketIOEventData = any;\n\nexport type SocketConnectedCallback = (connected: boolean) => void;\nexport type SocketIdCallback = (id?: string) => void;\n\nexport type SocketIOModuleType = {\n  initialize(\n    url: string,\n    options: SocketIOOptions,\n    callbackResponse: SocketCallbackResponse\n  ): void;\n  connect(path: string): void;\n  disconnect(path: string): void;\n  emit(path: string, eventName: string, options: SocketIOEventData): void;\n  on(path: string, eventName: string, callback: Function): void;\n  once(path: string, eventName: string, callback: Function): void;\n  off(path: string, eventName: string, uniqueID: string): void;\n  connected(path: string, callback: SocketConnectedCallback): void;\n  connectedSync(path: string): boolean;\n  getId(path: string, callback: SocketIdCallback): void;\n  getIdSync(path: string): string | null;\n  updateSocketOptions(options: SocketIOOptions, callback: Function): void;\n  updateSocketOptionsSync(options: SocketIOOptions): void;\n};\n\nclass SocketIO {\n  private SocketIOModule: SocketIOModuleType;\n  private readonly SocketIOCallbacksList: {\n    [uniqueID: string]: {\n      uniqueID: string;\n      eventName: string;\n      callback: Function;\n    };\n  };\n  eventEmitter: NativeEventEmitter;\n  path: string;\n  options: SocketIOOptions;\n\n  constructor(url: string, options?: SocketIOOptions) {\n    this.SocketIOModule = NativeModules.RNSocketIO;\n    this.SocketIOCallbacksList = {};\n    this.path = options?.path || '/socket.io';\n\n    this.options = { ...options, path: this.path };\n\n    this.eventEmitter = new NativeEventEmitter(NativeModules.SocketIo);\n\n    this.eventEmitter.addListener(\n      'onEventListener',\n      (nativeEvent: SocketNativeEvent) => {\n        this.SocketIOCallbacksList[nativeEvent.uniqueID]?.callback(\n          nativeEvent.data\n        );\n      }\n    );\n\n    this.SocketIOModule.initialize(\n      url,\n      this.options,\n      this._callCallbackResponse\n    );\n  }\n\n  _callCallbackResponse(error?: Error) {\n    if (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Open socket connection.\n   */\n  connect() {\n    this.SocketIOModule.connect(this.path);\n  }\n\n  /**\n   * Close socket connection.\n   */\n  disconnect() {\n    this.SocketIOModule.disconnect(this.path);\n  }\n\n  /**\n   * Send socket event.\n   * @param eventName Name of socket event.\n   * @param data Data to send on socket event.\n   */\n  emit(eventName: string, data?: SocketIOEventData) {\n    this.SocketIOModule.emit(this.path, eventName, { data });\n  }\n\n  /**\n   * Listen to socket event.\n   * @param eventName Name of socket event.\n   * @param callback Callback to listen to socket event.\n   */\n  on(eventName: string, callback: Function) {\n    this.SocketIOModule.on(\n      this.path,\n      eventName,\n      (nativeEventName: string, uniqueID: string) => {\n        this.SocketIOCallbacksList[uniqueID] = {\n          uniqueID,\n          eventName: nativeEventName,\n          callback,\n        };\n      }\n    );\n  }\n\n  /**\n   * Listen once to socket event.\n   * @param eventName Name of socket event.\n   * @param callback Callback to listen to socket event.\n   */\n  once(eventName: string, callback: Function) {\n    this.SocketIOModule.once(\n      this.path,\n      eventName,\n      (nativeEventName: string, uniqueID: string) => {\n        this.SocketIOCallbacksList[uniqueID] = {\n          uniqueID,\n          eventName: nativeEventName,\n          callback,\n        };\n      }\n    );\n  }\n\n  /**\n   * Remove socket event listener.\n   * @param eventName Name of socket event.\n   * @param callback Callback of registered socket event.\n   */\n  off(eventName: string, callback: Function) {\n    let keyToDelete: string | null = null;\n\n    for (const key of Object.keys(this.SocketIOCallbacksList)) {\n      const listItem = this.SocketIOCallbacksList[key];\n\n      if (listItem.eventName === eventName && listItem.callback === callback) {\n        keyToDelete = listItem.uniqueID;\n\n        this.SocketIOModule.off(this.path, eventName, keyToDelete);\n\n        break;\n      }\n    }\n\n    if (keyToDelete) {\n      delete this.SocketIOCallbacksList[keyToDelete];\n    }\n  }\n\n  /**\n   * Get connection status of socket.\n   * @param callback Callback with connection status of socket.\n   */\n  connected(callback: SocketConnectedCallback) {\n    this.SocketIOModule.connected(this.path, callback);\n  }\n\n  /**\n   * Get id of socket.\n   * @param callback Callback with id of socket.\n   */\n  getId(callback: SocketIdCallback) {\n    this.SocketIOModule.getId(this.path, callback);\n  }\n\n  /**\n   * Get connection status of socket.\n   * Warning: this method are synchronous blocking UI, use it carefully.\n   */\n  connectedSync() {\n    return this.SocketIOModule.connectedSync(this.path);\n  }\n\n  /**\n   * Get id of socket.\n   * Warning: this method are synchronous blocking UI, use it carefully.\n   */\n  getIdSync() {\n    return this.SocketIOModule.getIdSync(this.path);\n  }\n\n  /**\n   * Update socket options, this updates general instances paths.\n   * @param options\n   * @param callback\n   */\n  updateSocketOptions(options: SocketIOOptions, callback: Function) {\n    if (!options)\n      throw new Error(\n        'options is a required property of type \"SocketIOOptions\"'\n      );\n\n    this.SocketIOModule.updateSocketOptions(options, callback);\n  }\n\n  /**\n   * Update socket options, this updates general instances paths.\n   * Warning: this method are synchronous blocking UI, use it carefully.\n   * @param options\n   */\n  updateSocketOptionsSync(options: SocketIOOptions) {\n    if (!options)\n      throw new Error(\n        'options is a required property of type \"SocketIOOptions\"'\n      );\n\n    this.SocketIOModule.updateSocketOptionsSync(options);\n  }\n\n  static serializeQuery(object: any) {\n    let str = [];\n\n    for (const p in object)\n      if (object.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(object[p]));\n      }\n    return str.join('&');\n  }\n}\n\nexport default SocketIO;\n"]}