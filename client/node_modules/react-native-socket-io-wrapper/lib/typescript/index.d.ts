import { NativeEventEmitter } from 'react-native';
declare type SocketCallbackResponse = (error?: Error) => void;
export declare type SocketIOOptions = {
    transports?: string[];
    forceNew?: boolean;
    multiplex?: boolean;
    reconnectionAttempts?: number;
    reconnectionDelay?: number;
    reconnectionDelayMax?: number;
    randomizationFactor?: number;
    timeout?: number;
    query?: string;
    path?: string;
};
export declare type SocketIOEventData = any;
export declare type SocketConnectedCallback = (connected: boolean) => void;
export declare type SocketIdCallback = (id?: string) => void;
export declare type SocketIOModuleType = {
    initialize(url: string, options: SocketIOOptions, callbackResponse: SocketCallbackResponse): void;
    connect(path: string): void;
    disconnect(path: string): void;
    emit(path: string, eventName: string, options: SocketIOEventData): void;
    on(path: string, eventName: string, callback: Function): void;
    once(path: string, eventName: string, callback: Function): void;
    off(path: string, eventName: string, uniqueID: string): void;
    connected(path: string, callback: SocketConnectedCallback): void;
    connectedSync(path: string): boolean;
    getId(path: string, callback: SocketIdCallback): void;
    getIdSync(path: string): string | null;
    updateSocketOptions(options: SocketIOOptions, callback: Function): void;
    updateSocketOptionsSync(options: SocketIOOptions): void;
};
declare class SocketIO {
    private SocketIOModule;
    private readonly SocketIOCallbacksList;
    eventEmitter: NativeEventEmitter;
    path: string;
    options: SocketIOOptions;
    constructor(url: string, options?: SocketIOOptions);
    _callCallbackResponse(error?: Error): void;
    /**
     * Open socket connection.
     */
    connect(): void;
    /**
     * Close socket connection.
     */
    disconnect(): void;
    /**
     * Send socket event.
     * @param eventName Name of socket event.
     * @param data Data to send on socket event.
     */
    emit(eventName: string, data?: SocketIOEventData): void;
    /**
     * Listen to socket event.
     * @param eventName Name of socket event.
     * @param callback Callback to listen to socket event.
     */
    on(eventName: string, callback: Function): void;
    /**
     * Listen once to socket event.
     * @param eventName Name of socket event.
     * @param callback Callback to listen to socket event.
     */
    once(eventName: string, callback: Function): void;
    /**
     * Remove socket event listener.
     * @param eventName Name of socket event.
     * @param callback Callback of registered socket event.
     */
    off(eventName: string, callback: Function): void;
    /**
     * Get connection status of socket.
     * @param callback Callback with connection status of socket.
     */
    connected(callback: SocketConnectedCallback): void;
    /**
     * Get id of socket.
     * @param callback Callback with id of socket.
     */
    getId(callback: SocketIdCallback): void;
    /**
     * Get connection status of socket.
     * Warning: this method are synchronous blocking UI, use it carefully.
     */
    connectedSync(): boolean;
    /**
     * Get id of socket.
     * Warning: this method are synchronous blocking UI, use it carefully.
     */
    getIdSync(): string | null;
    /**
     * Update socket options, this updates general instances paths.
     * @param options
     * @param callback
     */
    updateSocketOptions(options: SocketIOOptions, callback: Function): void;
    /**
     * Update socket options, this updates general instances paths.
     * Warning: this method are synchronous blocking UI, use it carefully.
     * @param options
     */
    updateSocketOptionsSync(options: SocketIOOptions): void;
    static serializeQuery(object: any): string;
}
export default SocketIO;
